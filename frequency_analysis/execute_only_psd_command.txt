fft_psd(fft_data=fft_data, recharge=recharge, aquifer_thickness=30,aquifer_length=1000,path_to_project="/Users/houben/PhD/modelling/transect/ogs/confined/transient/rectangular/Groundwater@UFZ/Model_Setup_D_day_EVE/homogeneous/D18-D30_whitenoise/shh_anal_test/Groundwater@UFZ_eve_HOMO_276_D_28",fit=True,time_step_size=86400, savefig=True)


fft_data = np.loadtxt("/Users/houben/PhD/modelling/shh_analytical/models/darcy_8401_days_from_20181210_darcy/1000_30_9.00e-05/head_ogs_obs_0500_mean.txt")
recharge = np.loadtxt("/Users/houben/PhD/modelling/shh_analytical/models/darcy_8401_days_from_20181210_darcy/1000_30_9.00e-05/rfd_curve#1.txt")
T_l,kf_l,Ss_l,D_l,a_l,t_l,T_d,kf_d,Ss_d,D_d,a_d,t_d,power_spectrum_output,power_spectrum_input,power_spectrum_output,power_spectrum_result,frequency_input = fft_psd(fft_data=fft_data, recharge=recharge, aquifer_thickness=30,aquifer_length=1000,path_to_project="/Users/houben/PhD/modelling/shh_analytical/models/darcy_8401_days_from_20181210_darcy/1000_30_9.00e-05",fit=False,time_step_size=86400, savefig=False)


plt.loglog(shh_analytical(power_spectrum_input,frequency_input, 2.7e-3, 30e-5, 500, 1000, m=10, n=10, True)









OLD FUNCTION FOR SHH analytical for scipy optimization

'''
def shh_sww_analytical(X, Sy, T):
    f = X[0]
    Sww = X[1]
    # define a (discharge constant)
    a = np.pi ** 2 * T / (4 * L ** 2)
    # define tc (characteristic time scale)
    tc = Sy / a
    # define dimensionless coordinate
    x_dim = x / L

    # calculate angular frequency omega from f
    omega = 2 * np.pi * f

    # define two helper functions
    def Bm(m, x_dim):
        return np.cos((2 * m + 1) * np.pi * x_dim / 2) / (2 * m + 1)

    def Bn(n, x_dim):
        return np.cos((2 * n + 1) * np.pi * x_dim / 2) / (2 * n + 1)

    outer_sum = 0
    for j in range(0, m):
        inner_sum = 0
        for k in range(0, n):
            inner_sum += (
                ((-1) ** (j + k) * Bm(j, x_dim) * Bn(k, x_dim) * Sww)
                / (2 * j ** 2 + 2 * k ** 2 + 2 * j + 2 * k + 1)
                * (
                    (2 * j + 1) ** 2
                    / (((2 * j + 1) ** 4 / tc ** 2) + omega ** 2)
                )
            )
        outer_sum += inner_sum
    return outer_sum * (16 / np.pi ** 2 / Sy ** 2)



initial_guess = [0.003,0.004]

xdata = np.vstack([frequency_input, power_spectrum_input])
'''





OLD Script: shh_analytical

#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
"""


from __future__ import division
import numpy as np

def shh_analytical_help(X, Sy, T, x, L):
    # define a (discharge constant)
    a = np.pi ** 2 * T / (4 * L ** 2)
    # define tc (characteristic time scale)
    tc = Sy / a
    # define dimensionless coordinate
    x_dim = x / L



    shh_analytical(X, )


#def shh_analytical(Sww, f, Sy, T, x, L, m=10, n=10, norm=False):
def shh_analytical(X, Sy, T, m=5, n=5, norm=False):
    """
    Function to analyticaly compute the power spectrum of head with a given
    spectrum of the coresponding recharge process Sww in a phreatic aquifer,
    modeled by a linearized Boussinesq-Equation.
    For further explanations see:
        Liang and Zhang, 2013. Temporal and spatial variation and scaling of
        groundwater levels in a bounded unconfined aquifer. Journal of
        Hydrology. http://dx.doi.org/10.1016/j.jhydrol.2012.11.044


    Definition
    ----------
    def shh_analytical(Sww, omega, Sy, T, x, L, m=1000, n=1000)


    Input
    -----
    Sww         array, power spectrum of recharge as function of frequency
                omega.
    f           array, frequencies [1/T], will be internally converted to
                angular frequency omega
    Sy          float, specific yield [-]
                The specific storage (Ss) in an unconfined aquifer is usually
                much smaller than the specific yield (Sy). Therefore,
                storativity (S[-]) can be approximated with Sy.
                For an unconfined aquifer:
                S = Sy + Ss * b
                with b = saturated thickness?
    T           float, transmissivity [L^2/T]
                T = k * b
                with b = saturated thickness [L] and k = hydr. conductivity
                [L/T]
                Is used to calculate the discharge parameter a.
    x           float, Location of observed head time series [L]
                x = 0 : dh/dx = 0, x = L : h = h0 (h0 = constant head)
    L           float, aquifer length [L]
    m           integer, number of terms of outer sum, dafault = 1000?
    n           integer, number of terms of inner sum, default = 1000?
    norm        bool, normalize the output spectrum Shh by the input spectrum Sww


    Output
    ------
    array, Power spectrum of groundwater head as function of omega


    Restrictions
    ------------
    None.


    References
    ----------
    Liang and Zhang, 2013. Temporal and spatial variation and scaling of
    groundwater levels in a bounded unconfined aquifer. Journal of
    Hydrology. http://dx.doi.org/10.1016/j.jhydrol.2012.11.044


    Examples
    --------
    >>> from autostring import astr
    >>> print(astr(esat(293.15),3,pp=True))


    License
    -------
    asd

    """
    f, Sww = X

    # define a (discharge constant)
    a = np.pi ** 2 * T / (4 * L ** 2)
    # define tc (characteristic time scale)
    tc = Sy / a
    # define dimensionless coordinate
    x_dim = x / L

    # calculate angular frequency omega from f
    omega = [i * 2 * np.pi for i in f]

    # define two helper functions
    def Bm(m, x_dim):
        return np.cos((2 * m + 1) * np.pi * x_dim / 2) / (2 * m + 1)

    def Bn(n, x_dim):
        return np.cos((2 * n + 1) * np.pi * x_dim / 2) / (2 * n + 1)

    Shh = []
    print("Omega has length of " + str(len(omega)))
    for i, freq in enumerate(omega):
        outer_sum = 0
        # print("Currently calculating value " + str(i) + " of " + str(len(omega)))
        for j in range(0, m):
            inner_sum = 0
            for k in range(0, n):
                inner_sum += (
                    ((-1) ** (j + k) * Bm(j, x_dim) * Bn(k, x_dim) * Sww[i])
                    / (2 * j ** 2 + 2 * k ** 2 + 2 * j + 2 * k + 1)
                    * (
                        (2 * j + 1) ** 2
                        / (((2 * j + 1) ** 4 / tc ** 2) + omega[i] ** 2)
                    )
                )
            outer_sum += inner_sum
            # print(outer_sum)
        Shh.append(outer_sum * (16 / np.pi ** 2 / Sy ** 2))
    print("Finished")

    # approximation for t >> 1, beta = 2, Shh(omega) prop. omega**2, for more
    # info see Liang and Zhang 2013
    # Shh = [Sww[i]/Sy**2/omega[i] for i in range(0, len(omega))]

    if norm == True:
        Shh_Sww = [value/Sww[i] for i, value in enumerate(Shh)]
        Shh_Sww = np.asarray(Shh_Sww)
        return Shh_Sww
    else:
        Shh = np.asarray(Shh)
        return Shh
